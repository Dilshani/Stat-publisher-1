CREATE EXTERNAL TABLE IF NOT EXISTS MBMsgStat
    (messageID STRING,Time_stamp BIGINT, publisherIP STRING,payload_Destination STRING, payload_MessageContentLength INT,payload_Message_id BIGINT,payload_NoOfSubscribers INT,payload_expirationTime INT)
    STORED BY 'org.apache.hadoop.hive.cassandra.CassandraStorageHandler'
    WITH SERDEPROPERTIES (
    "wso2.carbon.datasource.name" = "WSO2BAM_CASSANDRA_DATASOURCE",
    "cassandra.cf.name" = "MESSAGE_STATISTICS_MB" ,
    "cassandra.columns.mapping" =
    ":key, Timestamp, meta_publisherIP,payload_destination, payload_messageContentLength,payload_messageId, payload_noOfSubscriptions, payload_expirationTime" );
 
CREATE EXTERNAL TABLE IF NOT EXISTS MBMsgStatPerMinute
     (publisherIP STRING,payload_Destination STRING,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,minute SMALLINT, time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month,day,hour,minute',
      'hive.jdbc.table.create.query' = 'CREATE TABLE MESSAGE_STATS_SUMMARY_PER_MINUTE (publisherIP VARCHAR(100) NOT NULL,payload_Destination VARCHAR,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,minute SMALLINT,time VARCHAR(30))');

insert overwrite table MBMsgStatPerMinute
select publisherIP,payload_Destination,payload_MessageContentLength,payload_NoOfSubscribers, payload_expirationTime,COUNT(Time_stamp) as msg_count,
year(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year, month(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,day(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,hour(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as hour, minute(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as minute, 
concat(substring(from_unixtime(cast(Time_stamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),':00') as time
from MBMsgStat
group by publisherIP,payload_Destination,payload_MessageContentLength,payload_NoOfSubscribers, payload_expirationTime,
year(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), month(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),day(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),hour(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),minute(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),substring(from_unixtime(cast(Time_stamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16);
                            
CREATE EXTERNAL TABLE IF NOT EXISTS MBMsgStatPerMinuteDataFetcher (publisherIP STRING,payload_Destination STRING,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'MESSAGE_STATS_SUMMARY_PER_MINUTE' );
  
CREATE EXTERNAL TABLE IF NOT EXISTS MBMsgStatPerHour
     (publisherIP STRING,payload_Destination STRING,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month,day,hour',
      'hive.jdbc.table.create.query' = 'CREATE TABLE MESSAGE_STATS_SUMMARY_PER_HOUR (publisherIP VARCHAR(100) NOT NULL,payload_Destination VARCHAR,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,time VARCHAR(30))');

insert overwrite table MBMsgStatPerHour
select publisherIP,payload_Destination,payload_MessageContentLength,payload_NoOfSubscribers, payload_expirationTime,SUM(msg_count) as msg_count,
year,month,day,hour, 
concat(substr(time,0,13),':00:00') as time
from MBMsgStatPerMinuteDataFetcher
group by publisherIP,payload_Destination,payload_MessageContentLength,payload_NoOfSubscribers, payload_expirationTime,
year,month,day,hour,substr(time,0,13);

CREATE EXTERNAL TABLE IF NOT EXISTS MBMsgStatPerHourDataFetcher (publisherIP STRING,payload_Destination STRING,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'MESSAGE_STATS_SUMMARY_PER_HOUR' ); 

CREATE EXTERNAL TABLE IF NOT EXISTS MBMsgStatPerDay
     (publisherIP STRING,payload_Destination STRING,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month,day',
      'hive.jdbc.table.create.query' = 'CREATE TABLE MESSAGE_STATS_SUMMARY_PER_DAY (publisherIP VARCHAR(100) NOT NULL,payload_Destination VARCHAR,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,time VARCHAR(30))');

insert overwrite table MBMsgStatPerDay
select publisherIP,payload_Destination,payload_MessageContentLength,payload_NoOfSubscribers, payload_expirationTime,SUM(msg_count) as msg_count,
year,month,day, 
substr(time,0,10) as time
from MBMsgStatPerHourDataFetcher
group by publisherIP,payload_Destination,payload_MessageContentLength,payload_NoOfSubscribers, payload_expirationTime,
year,month,day,substr(time,0,10);

CREATE EXTERNAL TABLE IF NOT EXISTS MBMsgStatPerDayDataFetcher (publisherIP STRING,payload_Destination STRING,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'MESSAGE_STATS_SUMMARY_PER_DAY' ); 
  
CREATE EXTERNAL TABLE IF NOT EXISTS MBMsgStatPerMonth
     (publisherIP STRING,payload_Destination STRING,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month',
      'hive.jdbc.table.create.query' = 'CREATE TABLE MESSAGE_STATS_SUMMARY_PER_MONTH (publisherIP VARCHAR(100) NOT NULL,payload_Destination VARCHAR,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,time VARCHAR(30))');

insert overwrite table MBMsgStatPerMonth
select publisherIP,payload_Destination,payload_MessageContentLength,payload_NoOfSubscribers, payload_expirationTime,SUM(msg_count) as msg_count,
year,month, 
substr(time,0,7) as time
from MBMsgStatPerDayDataFetcher
group by publisherIP,payload_Destination,payload_MessageContentLength,payload_NoOfSubscribers, payload_expirationTime,
year,month,substr(time,0,7);


     
      
