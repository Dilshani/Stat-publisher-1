CREATE EXTERNAL TABLE IF NOT EXISTS MBAcknowledgeStat
    (key STRING,Time_stamp BIGINT, publisherIP STRING,payload_Message_id BIGINT,payload_queueName STRING)
    STORED BY 'org.apache.hadoop.hive.cassandra.CassandraStorageHandler'
    WITH SERDEPROPERTIES (
    "wso2.carbon.datasource.name" = "WSO2BAM_CASSANDRA_DATASOURCE",
    "cassandra.cf.name" = "ACK_STATISTICS_MB" ,
    "cassandra.columns.mapping" =
    ":key,payload_timestamp, meta_publisherIP,payload_messageId, payload_queueName" );
    
CREATE EXTERNAL TABLE IF NOT EXISTS MBAcknowledgeStatPerMinute
     (publisherIP STRING,payload_queueName STRING,ackPacket_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,minute SMALLINT, time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month,day,hour,minute',
      'hive.jdbc.table.create.query' = 'CREATE TABLE ACKNOWLEDGE_STATS_SUMMARY_PER_MINUTE (publisherIP VARCHAR(100) NOT NULL,payload_queueName VARCHAR,ackPacket_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,minute SMALLINT,time VARCHAR(30))');

insert overwrite table MBAcknowledgeStatPerMinute
select publisherIP,payload_queueName,COUNT(payload_Message_id) as ackPacket_count,
year(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year, month(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,day(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,hour(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as hour, minute(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as minute, 
concat(substring(from_unixtime(cast(Time_stamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),':00') as time
from MBAcknowledgeStat
group by publisherIP,payload_queueName,
year(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), month(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),day(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),hour(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),minute(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),substring(from_unixtime(cast(Time_stamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16);
                            
CREATE EXTERNAL TABLE IF NOT EXISTS MBAcknowledgeStatPerMinuteDataFetcher (publisherIP STRING,payload_queueName STRING,ackPacket_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'ACKNOWLEDGE_STATS_SUMMARY_PER_MINUTE' );
  
CREATE EXTERNAL TABLE IF NOT EXISTS MBAcknowledgeStatPerHour
     (publisherIP STRING,payload_queueName STRING,ackPacket_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month,day,hour',
      'hive.jdbc.table.create.query' = 'CREATE TABLE ACKNOWLEDGE_STATS_SUMMARY_PER_HOUR (publisherIP VARCHAR(100) NOT NULL,payload_queueName VARCHAR,ackPacket_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,time VARCHAR(30))');

insert overwrite table MBAcknowledgeStatPerHour
select publisherIP,payload_queueName,SUM(ackPacket_count) as ackPacket_count,
year,month,day,hour, 
concat(substr(time,0,13),':00:00') as time
from MBAcknowledgeStatPerMinuteDataFetcher
group by  publisherIP,payload_queueName,
year,month,day,hour,substr(time,0,13);

CREATE EXTERNAL TABLE IF NOT EXISTS MBAcknowledgeStatPerHourDataFetcher (publisherIP STRING,payload_queueName STRING,ackPacket_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'ACKNOWLEDGE_STATS_SUMMARY_PER_HOUR' ); 

CREATE EXTERNAL TABLE IF NOT EXISTS MBAcknowledgeStatPerDay
     (publisherIP STRING,payload_queueName STRING,ackPacket_count INT,year SMALLINT,month SMALLINT,day SMALLINT,time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month,day',
      'hive.jdbc.table.create.query' = 'CREATE TABLE ACKNOWLEDGE_STATS_SUMMARY_PER_DAY (publisherIP VARCHAR(100) NOT NULL,payload_queueName VARCHAR,ackPacket_count INT,year SMALLINT,month SMALLINT,day SMALLINT,time VARCHAR(30))');

insert overwrite table MBAcknowledgeStatPerDay
select publisherIP,payload_queueName,SUM(ackPacket_count) as ackPacket_count,
year,month,day,substr(time,0,10) as time
from MBAcknowledgeStatPerHourDataFetcher
group by publisherIP,payload_queueName,year,month,day,substr(time,0,10);


CREATE EXTERNAL TABLE IF NOT EXISTS MBAcknowledgeStatPerDayDataFetcher 
       (publisherIP STRING,payload_queueName STRING,ackPacket_count INT,year SMALLINT,month SMALLINT,day SMALLINT,time STRING) 
       STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'mapred.jdbc.input.table.name' = 'ACKNOWLEDGE_STATS_SUMMARY_PER_DAY' );     
      
CREATE EXTERNAL TABLE IF NOT EXISTS MBAcknowledgeStatPerMonth
     (publisherIP STRING,payload_queueName STRING,ackPacket_count INT,year SMALLINT,month SMALLINT,time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month',
      'hive.jdbc.table.create.query' = 'CREATE TABLE ACKNOWLEDGE_STATS_SUMMARY_PER_MONTH (publisherIP VARCHAR(100) NOT NULL,payload_queueName VARCHAR,ackPacket_count INT,year SMALLINT,month SMALLINT,time VARCHAR(30))');

insert overwrite table MBAcknowledgeStatPerMonth
select  publisherIP,payload_queueName,SUM(ackPacket_count) as ackPacket_count,year,month,substr(time,0,7) as time
from MBAcknowledgeStatPerDayDataFetcher
group by publisherIP,payload_queueName,year,month,substr(time,0,7);

CREATE EXTERNAL TABLE IF NOT EXISTS MBStat
    (key STRING,Time_stamp BIGINT, publisherIP STRING,payload_NoOfSubscribers INT, payload_NoOfTopics INT)
    STORED BY 'org.apache.hadoop.hive.cassandra.CassandraStorageHandler'
    WITH SERDEPROPERTIES (
    "wso2.carbon.datasource.name" = "WSO2BAM_CASSANDRA_DATASOURCE",
    "cassandra.cf.name" = "MB_STATISTICS_MB" ,
    "cassandra.columns.mapping" =
    ":key, payload_timestamp, meta_publisherIP, payload_noOfSubscribers, payload_noOfTopics" );
  
CREATE EXTERNAL TABLE IF NOT EXISTS MBStatPerMinute
     (publisherIP STRING,payload_NoOfSubscribers INT, payload_NoOfTopics INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,minute SMALLINT,time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month,day,hour,minute',
      'hive.jdbc.table.create.query' = 'CREATE TABLE MB_STATS_SUMMARY_PER_MINUTE (publisherIP VARCHAR(100) NOT NULL, payload_NoOfSubscribers INT,payload_NoOfTopics INT,year SMALLINT, month SMALLINT, day SMALLINT, hour SMALLINT, minute SMALLINT,time VARCHAR(30))');

insert overwrite table MBStatPerMinute
select publisherIP,payload_NoOfSubscribers,payload_NoOfTopics,
year(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year, month(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,day(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,hour(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as hour, minute(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as minute,
concat(substring(from_unixtime(cast(Time_stamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),':00') as time
from MBStat
group by publisherIP,payload_NoOfSubscribers,payload_NoOfTopics,
year(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), month(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),day(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),hour(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),minute(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),
substring(from_unixtime(cast(Time_stamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16);

CREATE EXTERNAL TABLE IF NOT EXISTS MBStatPerMinuteDataFetcher (publisherIP STRING,payload_NoOfSubscribers INT, payload_NoOfTopics INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'MB_STATS_SUMMARY_PER_MINUTE' );
  
CREATE EXTERNAL TABLE IF NOT EXISTS MBStatPerHour
     (publisherIP STRING,payload_NoOfSubscribers INT, payload_NoOfTopics INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month,day,hour',
      'hive.jdbc.table.create.query' = 'CREATE TABLE MB_STATS_SUMMARY_PER_HOUR (publisherIP VARCHAR(100) NOT NULL, payload_NoOfSubscribers INT,payload_NoOfTopics INT,year SMALLINT, month SMALLINT, day SMALLINT, hour SMALLINT,time VARCHAR(30))');

insert overwrite table MBStatPerHour
select publisherIP,payload_NoOfSubscribers,payload_NoOfTopics,
year, month,day,hour, 
concat(substr(time,0,13),':00:00') as time
from MBStatPerMinuteDataFetcher
group by publisherIP,payload_NoOfSubscribers,payload_NoOfTopics,
year, month,day,hour,substr(time,0,13);

CREATE EXTERNAL TABLE IF NOT EXISTS MBStatPerHourDataFetcher (publisherIP STRING,payload_NoOfSubscribers INT, payload_NoOfTopics INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'MB_STATS_SUMMARY_PER_HOUR' );
  
CREATE EXTERNAL TABLE IF NOT EXISTS MBStatPerDay
     (publisherIP STRING,payload_NoOfSubscribers INT, payload_NoOfTopics INT,year SMALLINT,month SMALLINT,day SMALLINT,time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month,day',
      'hive.jdbc.table.create.query' = 'CREATE TABLE MB_STATS_SUMMARY_PER_DAY (publisherIP VARCHAR(100) NOT NULL, payload_NoOfSubscribers INT,payload_NoOfTopics INT,year SMALLINT, month SMALLINT, day SMALLINT,time VARCHAR(30))');

insert overwrite table MBStatPerDay
select publisherIP,payload_NoOfSubscribers,payload_NoOfTopics,
year, month,day, 
substr(time,0,10) as time
from MBStatPerMinuteDataFetcher
group by publisherIP,payload_NoOfSubscribers,payload_NoOfTopics,
year, month,day,substr(time,0,10);

CREATE EXTERNAL TABLE IF NOT EXISTS MBStatPerDayDataFetcher (publisherIP STRING,payload_NoOfSubscribers INT, payload_NoOfTopics INT,year SMALLINT,month SMALLINT,day SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'MB_STATS_SUMMARY_PER_DAY' );

CREATE EXTERNAL TABLE IF NOT EXISTS MBStatPerMonth
     (publisherIP STRING,payload_NoOfSubscribers INT, payload_NoOfTopics INT,year SMALLINT,month SMALLINT,time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month',
      'hive.jdbc.table.create.query' = 'CREATE TABLE MB_STATS_SUMMARY_PER_MONTH (publisherIP VARCHAR(100) NOT NULL, payload_NoOfSubscribers INT,payload_NoOfTopics INT,year SMALLINT, month SMALLINT,time VARCHAR(30))');

insert overwrite table MBStatPerMonth
select publisherIP,payload_NoOfSubscribers,payload_NoOfTopics,
year, month, 
substr(time,0,7) as time
from MBStatPerMinuteDataFetcher
group by publisherIP,payload_NoOfSubscribers,payload_NoOfTopics,
year, month,substr(time,0,7);

CREATE EXTERNAL TABLE IF NOT EXISTS MBMsgStat
    (key STRING,Time_stamp BIGINT, publisherIP STRING,payload_Destination STRING, payload_MessageContentLength INT,payload_Message_id BIGINT,payload_NoOfSubscribers INT,payload_expirationTime INT)
    STORED BY 'org.apache.hadoop.hive.cassandra.CassandraStorageHandler'
    WITH SERDEPROPERTIES (
    "wso2.carbon.datasource.name" = "WSO2BAM_CASSANDRA_DATASOURCE",
    "cassandra.cf.name" = "MESSAGE_STATISTICS_MB" ,
    "cassandra.columns.mapping" =
    ":key, payload_timestamp, meta_publisherIP,payload_destination, payload_messageContentLength,payload_messageId, payload_noOfSubscriptions, payload_expirationTime" );
 
CREATE EXTERNAL TABLE IF NOT EXISTS MBMsgStatPerMinute
     (publisherIP STRING,payload_Destination STRING,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,minute SMALLINT, time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month,day,hour,minute',
      'hive.jdbc.table.create.query' = 'CREATE TABLE MESSAGE_STATS_SUMMARY_PER_MINUTE (publisherIP VARCHAR(100) NOT NULL,payload_Destination VARCHAR,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,minute SMALLINT,time VARCHAR(30))');

insert overwrite table MBMsgStatPerMinute
select publisherIP,payload_Destination,payload_MessageContentLength,payload_NoOfSubscribers, payload_expirationTime,COUNT(Time_stamp) as msg_count,
year(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year, month(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,day(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as day,hour(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as hour, minute(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as minute, 
concat(substring(from_unixtime(cast(Time_stamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),':00') as time
from MBMsgStat
group by publisherIP,payload_Destination,payload_MessageContentLength,payload_NoOfSubscribers, payload_expirationTime,
year(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), month(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),day(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),hour(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),minute(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),substring(from_unixtime(cast(Time_stamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16);
                            
CREATE EXTERNAL TABLE IF NOT EXISTS MBMsgStatPerMinuteDataFetcher (publisherIP STRING,payload_Destination STRING,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'MESSAGE_STATS_SUMMARY_PER_MINUTE' );
  
CREATE EXTERNAL TABLE IF NOT EXISTS MBMsgStatPerHour
     (publisherIP STRING,payload_Destination STRING,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime BIGINT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month,day,hour',
      'hive.jdbc.table.create.query' = 'CREATE TABLE MESSAGE_STATS_SUMMARY_PER_HOUR (publisherIP VARCHAR(100) NOT NULL,payload_Destination VARCHAR,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,time VARCHAR(30))');

insert overwrite table MBMsgStatPerHour
select publisherIP,payload_Destination,payload_MessageContentLength,payload_NoOfSubscribers, payload_expirationTime,SUM(msg_count) as msg_count,
year,month,day,hour, 
concat(substr(time,0,13),':00:00') as time
from MBMsgStatPerMinuteDataFetcher
group by publisherIP,payload_Destination,payload_MessageContentLength,payload_NoOfSubscribers, payload_expirationTime,
year,month,day,hour,substr(time,0,13);

CREATE EXTERNAL TABLE IF NOT EXISTS MBMsgStatPerHourDataFetcher (publisherIP STRING,payload_Destination STRING,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'MESSAGE_STATS_SUMMARY_PER_HOUR' ); 

CREATE EXTERNAL TABLE IF NOT EXISTS MBMsgStatPerDay
     (publisherIP STRING,payload_Destination STRING,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month,day',
      'hive.jdbc.table.create.query' = 'CREATE TABLE MESSAGE_STATS_SUMMARY_PER_DAY (publisherIP VARCHAR(100) NOT NULL,payload_Destination VARCHAR,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,time VARCHAR(30))');

insert overwrite table MBMsgStatPerDay
select publisherIP,payload_Destination,payload_MessageContentLength,payload_NoOfSubscribers, payload_expirationTime,SUM(msg_count) as msg_count,
year,month,day, 
substr(time,0,10) as time
from MBMsgStatPerHourDataFetcher
group by publisherIP,payload_Destination,payload_MessageContentLength,payload_NoOfSubscribers, payload_expirationTime,
year,month,day,substr(time,0,10);

CREATE EXTERNAL TABLE IF NOT EXISTS MBMsgStatPerDayDataFetcher (publisherIP STRING,payload_Destination STRING,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,day SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'MESSAGE_STATS_SUMMARY_PER_DAY' ); 
  
CREATE EXTERNAL TABLE IF NOT EXISTS MBMsgStatPerMonth
     (publisherIP STRING,payload_Destination STRING,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime BIGINT,msg_count INT,year SMALLINT,month SMALLINT,time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month',
      'hive.jdbc.table.create.query' = 'CREATE TABLE MESSAGE_STATS_SUMMARY_PER_MONTH (publisherIP VARCHAR(100) NOT NULL,payload_Destination VARCHAR,payload_MessageContentLength INT,payload_NoOfSubscribers INT, payload_expirationTime INT,msg_count INT,year SMALLINT,month SMALLINT,time VARCHAR(30))');

insert overwrite table MBMsgStatPerMonth
select publisherIP,payload_Destination,payload_MessageContentLength,payload_NoOfSubscribers, payload_expirationTime,SUM(msg_count) as msg_count,
year,month, 
substr(time,0,7) as time
from MBMsgStatPerDayDataFetcher
group by publisherIP,payload_Destination,payload_MessageContentLength,payload_NoOfSubscribers, payload_expirationTime,
year,month,substr(time,0,7);

CREATE EXTERNAL TABLE IF NOT EXISTS MBServerStat
    (key STRING,Time_stamp BIGINT, publisherIP STRING,Description STRING, payload_HeapMemoryUsage BIGINT, payload_nonHeapMemoryUsage BIGINT,payload_CPULoadAverage DOUBLE)
    STORED BY 'org.apache.hadoop.hive.cassandra.CassandraStorageHandler'
    WITH SERDEPROPERTIES (
    "wso2.carbon.datasource.name" = "WSO2BAM_CASSANDRA_DATASOURCE",
    "cassandra.cf.name" = "SYSTEM_STATISTICS_MB" ,
    "cassandra.columns.mapping" =
    ":key, payload_timestamp, meta_publisherIP,Description,payload_heapMemoryUsage,payload_nonHeapMemoryUsage,payload_cpuLoadAverage" );

CREATE EXTERNAL TABLE IF NOT EXISTS MBServerStatPerMinute
     (publisherIP STRING,Description STRING,avg_HeapMemory BIGINT,avg_nonHeapMemory BIGINT,avg_CPUusage DOUBLE,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT,minute SMALLINT,time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month,day,hour,minute',
      'hive.jdbc.table.create.query' = 'CREATE TABLE SERVER_STATS_SUMMARY_PER_MINUTE (publisherIP VARCHAR(100) NOT NULL,Description VARCHAR,avg_HeapMemory BIGINT,avg_nonHeapMemory BIGINT,avg_CPUusage DOUBLE,year SMALLINT, month SMALLINT, day SMALLINT, hour SMALLINT, minute SMALLINT,time VARCHAR(30))');

insert overwrite table MBServerStatPerMinute
select publisherIP,Description,avg(payload_HeapMemoryUsage) as avg_HeapMemory,avg(payload_nonHeapMemoryUsage) as avg_nonHeapMemory,avg(payload_CPULoadAverage) as avg_CPUusage,
year(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as year, month(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as month,day(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS')) as day,hour(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as hour, minute(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )) as minute,
concat(substring(from_unixtime(cast(Time_stamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),':00') as time
from MBServerStat
group by year(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )), month(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),day(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),hour(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),minute(from_unixtime(cast(Time_stamp/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),substring(from_unixtime(cast(Time_stamp/1000 as BIGINT), 'yyyy-MM-dd HH:mm:ss'),0,16),publisherIP,Description;

CREATE EXTERNAL TABLE IF NOT EXISTS MBServerStatPerMinuteDataFetcher (publisherIP STRING,Description STRING,avg_HeapMemory BIGINT,avg_nonHeapMemory BIGINT,avg_CPUusage DOUBLE,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT, time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'SERVER_STATS_SUMMARY_PER_MINUTE' );

CREATE EXTERNAL TABLE IF NOT EXISTS MBServerStatPerHour
     (publisherIP STRING,Description STRING,avg_HeapMemory BIGINT,avg_nonHeapMemory BIGINT,avg_CPUusage DOUBLE,year SMALLINT,month SMALLINT,day SMALLINT,hour SMALLINT, time STRING)
      STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
      'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
      'hive.jdbc.update.on.duplicate' = 'true',
      'hive.jdbc.primary.key.fields' = 'publisherIP,year,month,day,hour',
      'hive.jdbc.table.create.query' = 'CREATE TABLE SERVER_STATS_SUMMARY_PER_HOUR (publisherIP VARCHAR(100) NOT NULL,Description VARCHAR,avg_HeapMemory BIGINT,avg_nonHeapMemory BIGINT,avg_CPUusage DOUBLE,year SMALLINT, month SMALLINT, day SMALLINT, hour SMALLINT, time VARCHAR(30))');

insert overwrite table MBServerStatPerHour
select publisherIP,Description,avg(avg_HeapMemory) as avg_HeapMemory,avg(avg_nonHeapMemory) as avg_nonHeapMemory,avg(avg_CPUusage) as avg_CPUusage,
year, month, day,hour,concat(substr(time,0,13),':00:00') as time
from MBServerStatPerMinuteDataFetcher
group by publisherIP,Description,year,month,day,hour,substr(time,0,13); 

CREATE EXTERNAL TABLE IF NOT EXISTS MBServerStatPerHourDataFetcher (publisherIP STRING,Description STRING,avg_HeapMemory BIGINT,avg_nonHeapMemory BIGINT,avg_CPUusage DOUBLE,year SMALLINT,month SMALLINT,day SMALLINT, time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'SERVER_STATS_SUMMARY_PER_HOUR' );

CREATE EXTERNAL TABLE IF NOT EXISTS MBServerStatPerDay (publisherIP STRING,Description STRING,avg_HeapMemory BIGINT,avg_nonHeapMemory BIGINT,avg_CPUusage DOUBLE,year SMALLINT,month SMALLINT,day SMALLINT,time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'publisherIP,year,month,day',
'hive.jdbc.table.create.query' = 'CREATE TABLE SERVER_STATS_SUMMARY_PER_DAY (publisherIP VARCHAR(100) NOT NULL,Description VARCHAR,avg_HeapMemory BIGINT,avg_nonHeapMemory BIGINT,avg_CPUusage DOUBLE,year SMALLINT, month SMALLINT, day SMALLINT, time VARCHAR(30))');

insert overwrite table MBServerStatPerDay
select publisherIP,Description,avg(avg_HeapMemory) as avg_HeapMemory,avg(avg_nonHeapMemory) as avg_nonHeapMemory,avg(avg_CPUusage) as avg_CPUusage,
 year, month, day ,substr(time,0,10) as time
from MBServerStatPerHourDataFetcher
group by publisherIP,Description,year, month,day,substr(time,0,10);

CREATE EXTERNAL TABLE IF NOT EXISTS MBServerStatPerDayDataFetcher (publisherIP STRING,Description STRING,avg_HeapMemory BIGINT,avg_nonHeapMemory BIGINT,avg_CPUusage DOUBLE,year SMALLINT,month SMALLINT, time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'mapred.jdbc.input.table.name' = 'SERVER_STATS_SUMMARY_PER_DAY' );

CREATE EXTERNAL TABLE IF NOT EXISTS MBServerStatPerMonth (publisherIP STRING,Description STRING,avg_HeapMemory BIGINT,avg_nonHeapMemory BIGINT,avg_CPUusage DOUBLE,year SMALLINT,month SMALLINT, time STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'publisherIP,year,month,time',
'hive.jdbc.table.create.query' = 'CREATE TABLE SERVER_STATS_SUMMARY_PER_MONTH (publisherIP VARCHAR(100) NOT NULL,Description VARCHAR,avg_HeapMemory BIGINT,avg_nonHeapMemory BIGINT,avg_CPUusage DOUBLE,year SMALLINT, month SMALLINT, time VARCHAR(30))');

insert overwrite table MBServerStatPerMonth
select publisherIP,Description,avg(avg_HeapMemory) as avg_HeapMemory,avg(avg_nonHeapMemory) as avg_nonHeapMemory,avg(avg_CPUusage) as avg_CPUusage,
year, month ,substr(time,0,7) as time
from MBServerStatPerDayDataFetcher
group by publisherIP,Description,year, month ,substr(time,0,7);

